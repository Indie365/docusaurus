/**
 * @generated
 */
module.exports = [
  {
    path: '2018/04/30/How-I-Converted-Profilo-To-Docusaurus.html',
    content:
      "\n> *“Joel and I were discussing having a website and how it would have been great to launch with it. So I challenged myself to add Docusaurus support. It took just over an hour and a half. I'm going to send you a PR with the addition so you can take a look and see if you like it. Your workflow for adding docs wouldn't be much different from editing those markdown files.”*\n>\n> *— Note sent to the Profilo team*\n\n\nThis is the story of the rather short journey it took to create the [Profilo](https://facebookincubator.github.io/profilo/) website using Docusaurus.\n\nProfilo, an Android library for collecting performance traces from production, [was announced](https://code.facebook.com/posts/356115241551826/profilo-understanding-app-performance-in-the-wild/) earlier this year. The project was [published on GitHub](https://github.com/facebookincubator/profilo/tree/802042f90f990998a272387e371b893af52465b8) with a less than [a handful or Markdown files](https://github.com/facebookincubator/profilo/tree/802042f90f990998a272387e371b893af52465b8/docs) to describe its functionality and no website to showcase any branding and highlight the logo. The task at hand was to turn these existing docs and logo into a website.\n\n<!--truncate-->\n\nIn general, when creating a website with Docusaurus you do the following:\n\n1. Generate a template website using Docusaurus scripts.\n1. Customize the generated template files for your desired site colors and your project configuration (ex: website and GitHub links).\n1. Create the website content:\n    1. Add your docs and any supporting assets.\n    1. Customize the default landing page provided by Docusaurus to suit your needs.\n    1. Configure the default site navigation file.\n1. Publish the website and set up how it will be published for future changes.\n\nGiven I had pre-existing Markdown files, I didn't have to generate the core content but simply make sure that Docusaurus could process the files by adding the expected metadata to them. Most of the work would therefore consist of customizing the defaults provided by Docusaurus.\n\n## Overview of Steps Taken\n\nHere's an overview of the steps taken to convert to a website. I'll discuss some of the design aspects in a later section.\n\n**Design and colors:**\n\n1. Got all the desired logo formats from designer. I had to create the *.favicon* one.\n1. Worked out some passable primary and secondary website colors using the http://paletton.com/ tools - very handy!\n\n**Initial website setup:**\n\n1. Forked the [Profilo project](https://github.com/facebookincubator/profilo/) on GitHub and created a local clone of the fork to set up the website.\n1. Created the initial Docusaurus website using the [installation instructions](https://docusaurus.io/docs/en/installation.html).\n1. Deleted the `docs-examples-from-docusaurus` and `website/blog-examples-from-docusaurus` folders as these would not be needed. Profilo had existing docs we could use and there was no need for blogs at this time.\n\n**Content creation:**\n\n1. Added metadata to the existing Markdown files found in the `docs` folder, for example:\n\n        +---\n        +id: architecture\n        +title: Architecture\n        +sidebar_label: Architecture\n        +---\n\n1. Added the logo assets to the `website/static/img` folder.\n1. Modified `website/pages/en/index.js`, the landing page, to highlight Profilo features.\n1. Modified `website/core/Footer.js`, the footer, to simplify it for Profilo.\n1. Edited `website/siteConfig.js` (website configuration file) to specify the previously chosen primary and secondary colors.\n1. Modified `website/sidebars.json` that specifies the sidebar navigation. Listed all the docs and customized it based on the metadata added to the Markdown files.\n1. Edited the website configuration file to specify the GitHub properties, logo images, header links, and the website link.\n1. Tested the website locally throughout this phase. (I ran `yarn start` from the `website` folder to start the server.)\n\n**Feedback and review changes:**\n\n1. Sent a [pull request](https://github.com/facebookincubator/profilo/pull/6) to the project.\n1. Updated the colors after the designer rightly gasped at the ones I had chosen (IANAD).\n1. Updated the colors and updated the PR.\n1. The PR was then accepted and [merged](https://github.com/facebookincubator/profilo/commit/6ad033aaf5a7d54e6d842f45a5bccd051a8e45ad). Yay!\n\n**Website publishing:**\n\n1. Pushed the first website version by running the Docusaurus publish script from the command line:\n\n        USE_SSH=true \\\n          GIT_USER=caabernathy \\\n          CURRENT_BRANCH=master \\\n          yarn run publish-gh-pages\n\n1. Configured Circle CI using the [provided Docusaurus instructions](https://docusaurus.io/docs/en/publishing.html#automating-deployments-using-continuous-integration). There were 2 PRs for this, [the first](https://github.com/facebookincubator/profilo/pull/8)for the initial config and [the second](https://github.com/facebookincubator/profilo/pull/12) to make sure Circle CI only triggered for changes in the master branch (thanks Joel Marcey!).\n\nThe final website was published on https://facebookincubator.github.io/profilo/. It had taken 1.5 hours to get to the initial PR stage and another half an hour or so to respond to review feedback and publish the website.\n\n## Design\n\nHere's what the initial website looked like when the first pull request was sent out:\n\n![Website Initial Design](/img/profilo_blog_post_website_initial.png)\n\nMost of the time in the content creation was spent picking colors that worked reasonably well with the given logo. These colors were a good jumping off point for designer feedback. I used Photoshop to sample various portions of the logo.\n\n![Picking Color Photoshop](/img/profilo_blog_post_photoshop_color_picker.png)\n\nI then took the RGB representation of the color and set it as the baseline color on [Paletton](http://paletton.com/). The website then gave me various color options to try on the website by editing the Docusaurus website configuration file.\n\n![Picking Color Paletton](/img/profilo_blog_post_palette_website_color_picker.png)\n\nThe selected primary and secondary colors were a good jumping off point for designer feedback.\n\nThere were also modifications made to the default website generated by Docusaurus. These changes were mainly around simplifying the footer and creating a customized landing page for Profilo that listed the project's features.\n\nHere's what the final website looked like:\n\n![Website Final Design](/img/profilo_blog_post_website_final.png)\n\nThis is an example page showing the core content, in this case the Getting Started page:\n\n![Website Docs Example](/img/profilo_blog_post_website_final_docs.png)\n\nThis also shows the sidebar structure that was set up through editing `website/sidebars.json`.\n\nLastly, I didn't have to worry about handling responsive design. You get this out of the box with Docusaurus!\n\n![Mobile Site](/img/profilo_blog_post_android_ios.png)\n\n## Final Thoughts\n\nThe Profilo engineers were happy to see that they didn't have to change their workflow to update existing content. They were able to continue working with Markdown files. This will still be true in the future if new docs are added, although there may be some config changes needed if the sidebar navigation needs to be updated.\n\nThe infrastructure provided by Docusaurus made it easy to convert Markdown files into a working website. Even though the project had only three docs, this gave Profilo a more professional look. So, it was well worth the short time investment to get it done.\n",
    title: 'How I Converted Profilo to Docusaurus in Under 2 Hours',
    author: 'Christine Abernathy',
    authorURL: 'http://twitter.com/abernathyca',
    authorFBID: 1424840234,
    authorTwitter: 'abernathyca',
    id: 'How I Converted Profilo to Docusaurus in Under 2 Hours',
    date: '2018-04-30T06:00:00.000Z',
    seconds: 1525068000,
  },
  {
    path: '2017/12/14/introducing-docusaurus.html',
    content:
      '\n![Introducing Slash](/img/slash-introducing.png)\n\nWe are very happy to introduce [Docusaurus](https://github.com/facebook/Docusaurus) to help you manage one or many open source websites.\n\nWe created [Docusaurus](https://docusaurus.io) for the following reasons:\n\n1. To put the focus on writing good documentation instead of worrying about the infrastructure of a website.\n1. To provide features that many of our open source websites need like blog support, search and versioning.\n1. To make it easy to push updates, new features, and bug fixes to everyone all at once.\n1. And, finally, to provide a consistent look and feel across all of our open source projects.\n\n<!--truncate-->\n\nDocusaurus is a tool designed to make it easy for teams to publish documentation websites without having to worry about the infrastructure and design details. At its core, all a user has to provide are documentation files written in markdown, customization of a provided home page written in React, and a few configuration modifications. Docusaurus handles the rest by providing default styles, site formatting, and simple document navigation. Getting started is easy, as users can [install](https://docusaurus.io/docs/en/installation.html) it using `npm` or `yarn` via a simple initialization script that [creates a working example website out of the box](https://docusaurus.io/docs/en/site-preparation.html).\n\nDocusaurus also provides core website and documentation features out-of-the-box including [blog support](https://docusaurus.io/docs/en/blog.html), [internationalization](https://docusaurus.io/docs/en/translation.html), [search](https://docusaurus.io/docs/en/search.html), and [versioning](https://docusaurus.io/docs/en/versioning.html). While some projects may not require any of these features, enabling them is generally a matter of updating configuration options instead of having to add the infrastructure from the ground up. As more features get added to Docusaurus, users just can easily update to the latest version. This can be done by simply running npm or yarn update and updating configuration options. Users or teams will no longer need to manually rework their entire website infrastructure each time a new feature gets added.\n\n## The Birth of docusaurus\n\n![Birth of Slash](/img/slash-birth.png)\n\nWhen Facebook first started their open source program, many teams implemented a custom website for each of their open source projects. This approach presented challenges when the open source program team was asked to help the project teams improve their documentation. Since each site was unique, adding basic infrastructure such as a blog, consistent navigation, search, etc. became challenging undertakings.\n\nThe open source team tried to help mitigate this problem by coming up with a standard template, based on Jekyll, that could be used as a starting point for a project website. We asked our new projects to manually copy our template source to  their repo, write their docs, and publish. This template approach was adopted by most of open source projects launched; some existing projects even converted their custom website implementations to the new template as well.\n\nThe problem with the "copy the template to your repo" approach is that, even though the platform is consistent, pushing updates becomes unmaintainable across an entire suite of projects already using the template. This is because we lost control of the template after a project copied it to their repo. Projects were free to modify the template as desired and apply their own project-specific features to it. So while projects share the same site generation platform, they have now diverted enough where they cannot take advantage of the new features we have added to the template over time. There was no easy way we could ask all current projects to "copy" a new version of the template since it might break their existing site or remove features that they have added on their own. Instead, we would have to apply the updates manually to each project one-by-one. This became very problematic when projects started asking for our team for internationalization support within the template, requiring low-level changes to how the template was structured and generated.\n\nSo we started thinking about what we could do to help mitigate the challenge of keeping sites updated and consistent across our entire portfolio. We also wanted multiple projects to share the same site generation software. We wanted them to start out with the same template, and yet have the flexibility to customize and adapt their site theme to suit their needs. They should be able to extend and customize their site, but when we update the underlying infrastructure with fixes and features, the project should be able update simply and without any breaking changes.\n\nDocusaurus was born!\n\nAt Facebook, Docusaurus allows us to quickly get different projects up and running with documentation websites, especially for teams who don\'t have much experience with web development or primarily want a basic site to showcase their project. Docusaurus already supports sites needing more advanced features like internationalization for Jest and versioning for React Native. As different projects request new features for their sites, they are added to Docusaurus and simultaneously provided to all projects! All together, this ends up greatly reducing the work needed  to maintain different sites for different projects. Our teams are able to focus on keeping their projects healthier by spending more time adding features, fixing bugs, and writing documentation.\n\n## Getting Up and Running\n\n![Slash Up and Running](/img/slash-upandrunning.png)\n\nAt its core, we wanted sites running Docusaurus to be simple to use. With one [installation](https://docusaurus.io/docs/en/installation.html) command and some simple [configuration](https://docusaurus.io/docs/en/site-preparation.html), you can actually have a default running website.\n\nWhen you run `docusaurus-init`, you will see a structure similar to:\n\n```bash\nroot-of-repo\n├── docs-examples-from-docusaurus\n│   ├── doc1.md\n│   ├── doc2.md\n│   ├── doc3.md\n│   ├── exampledoc4.md\n│   └── exampledoc5.md\n├── website\n│   ├── blog-examples-from-docusaurus\n│   │   ├── 2016-03-11-blog-post.md\n│   │   └── 2017-04-10-blog-post-two.md\n│   ├── core\n│   │   └── Footer.js\n│   ├── node_modules\n│   ├── package.json\n│   ├── pages\n│   ├── sidebars.json\n│   ├── siteConfig.js\n│   └── static\n```\n\nWith the exception of node_modules and package.json, all the directories and files you see are where you customize and add content to your Docusaurus-based website. The docs folder is where you add your markdown that represents your documentation; the blog folder is where you add your markdown for your [blog posts](https://docusaurus.io/docs/en/blog.html); `siteConfig.js` is where you make most of the [customizations](https://docusaurus.io/docs/en/site-config.html) for your site; `sidebars.json` is where you maintain the layout and content of the [sidebar](https://docusaurus.io/docs/en/navigation.html) for your documentation; the `pages` folder is where you add [custom](https://docusaurus.io/docs/en/custom-pages.html) pages for your site; the `static` folder is where all of your static assets go (e.g., CSS stylesheets and images); and the `core` folder is where you can customize core components of the site, in this case the footer.\n\n## How does Docusaurus work?\n\nDocusaurus is written primarily in JavaScript and [React](https://facebook.github.io/react), replacing Jekyll which we used in the old template. We use [Remarkable](https://github.com/jonschlinkert/remarkable) for our markdown rendering and [highlight.js](https://highlightjs.org/) for our code block syntax highlighting. The core of Docusaurus\' functionality is in the [lib directory](https://github.com/facebookexperimental/Docusaurus/tree/master/lib) of the [Docusaurus repo](https://github.com/facebook/Docusaurus/). The general structure looks like:\n\n```bash\nroot-of-Docusaurus\n├── lib\n│   ├── core\n│   ├── server\n│   │   ├── generate.js\n│   │   ├── server.js\n│   │   └── ...and more files\n│   ├── static\n│   ├── build-files.js\n│   ├── copy-examples.js\n│   ├── generate-feed.js\n│   ├── publish-gh-pages.js\n│   ├── rename-version.js\n│   ├── start-server.js\n│   ├── versions.js\n│   └── write-translations.js\n```\n\nThe key files here are build-files.js and start-server.js. There are many similarities between these two files: `build-files.js` is used to build the physical artifacts for serving by an external web server. `start-server.js` is used  to run the Docusaurus server and locally test your site. Both go through the following general process to take all of the markdown and configuration to create a runnable website:\n\n1. Process your website settings in `siteConfig.js`\n1. Read the document metadata that exists in all the markdown files in your docs directory.\n1. Create a table of contents for your documents based upon the ids extracted from the metadata.\n1. Convert the markdown to HTML, including doing link replacement.\n1. These files will go in a build/docs directory of the compiled site, and any translated versions will go into a language specific folder within the build/docs folder.\n1. Repeat 1-3 for blog posts.\n1. The blog file will go in a build/blog directory of the compiled site.\n1. Read the main.css file and concatenate any user-defined css into master css file that will be in the build/css directory of the compiled site.\n1. Copy images into an build/img directory of the compiled site.\n1. Take any custom pages that were added to the pages folder of the site and compile/copy those into the root build directory of the compiled site. Any translated versions will go into a language specific folder within build.\n1. Create CNAME and sitemap.xml files and add those to build.\n\nNote that this process does not take into full account how translations or versioning works. The underlying details of those features will be saved for future blog posts.\n\nThe final structure of your compiled site will look similar to:\n\n```bash\nbuild\n├── website\n│   ├── CNAME\n│   ├── blog\n│   ├── css\n│   ├── docs\n│   ├── en\n│   ├── help.html # custom page\n│   ├── img\n│   ├── index.html # landing page\n│   ├── sitemap.xml\n│   └── users.html # custom page\n```\n\n## Community\n\n![Docusaurus](/img/docusaurus.svg)\n\nWe welcome your [contributions](https://github.com/facebook/Docusaurus/blob/master/CONTRIBUTING.md) to Docusaurus, whether you want to use it for your own site, you want to [contribute](https://github.com/facebook/Docusaurus/blob/master/CONTRIBUTING.md) to the Docusaurus core or just have questions. Follow us on [GitHub](https://github.com/facebook/Docusaurus) and [Twitter](https://twitter.com/docusaurus).\n\n## Acknowledgements\n\nDocusaurus wouldn\'t exist without the work of the rest of the core Docusaurus team: [Eric Nakagawa](http://twitter.com/ericnakagawa), [Hector Ramos](https://twitter.com/hectorramos), [Eric Vicenti](https://twitter.com/EricVicenti) and [Frank Li](https://github.com/deltice) — a former intern at Facebook who implemented the core technology and features.\n\nSpecial thanks also goes out to our earliest [adopters](https://docusaurus.io/en/users.html) of Docusaurus:\n\n- [BuckleScript](https://bucklescript.github.io/)\n- [FastText](https://fasttext.cc)\n- [Jest](https://jestjs.io)\n- [Make It Open](http://makeitopen.com)\n- [Prettier](https://prettier.io/)\n- [Reason-react](https://reasonml.github.io/reason-react/)\n- [React Native](https://facebook.github.io/react-native/)\n- [Relay](https://facebook.github.io/relay/)\n\nWithout their dedication to creating or migrating their websites over to the platform, we would have not have been in the position where we are today.\n\n## Resources\n\n- [Read our documentation](https://docusaurus.io)\n- [Follow our Twitter feed](https://twitter.com/docusaurus)\n- [Follow us on GitHub](https://github.com/facebook/Docusaurus)\n- [About Slash, the Docusaurus mascot](https://docusaurus.io/about-slash.html)\n',
    title: 'Introducing Docusaurus',
    author: 'Joel Marcey',
    authorURL: 'http://twitter.com/JoelMarcey',
    authorFBID: 611217057,
    authorTwitter: 'JoelMarcey',
    id: 'Introducing Docusaurus',
    date: '2017-12-14T06:00:00.000Z',
    seconds: 1513231200,
  },
];
