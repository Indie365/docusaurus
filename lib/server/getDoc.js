const CWD = process.cwd();
const readMetadata = require('./readMetadata.js');
const fs = require('fs-extra');
const env = require('./env.js'); 
const siteConfig = require(CWD + '/siteConfig.js');
const removeModuleAndChildrenFromCache = require('./cachePurge.js');
const React = require('react');
const toSlug = require('../core/toSlug.js');

const TABLE_OF_CONTENTS_TOKEN = '<AUTOGENERATED_TABLE_OF_CONTENTS>';

const insertTableOfContents = rawContent => {
  const regexp = /\n###\s+(`.*`.*)\n/g;
  let match;
  const headers = [];
  while ((match = regexp.exec(rawContent))) {
    headers.push(match[1]);
  }

  const tableOfContents = headers
    .map(header => `  - [${header}](#${toSlug(header)})`)
    .join('\n');

  return rawContent.replace(TABLE_OF_CONTENTS_TOKEN, tableOfContents);
};

// Create a document React component from the metadata and return it.
// Used in generate.js and server.js. We are better sharing the code.
module.exports = (metadata) => {
  const Metadata = require('../core/metadata.js');

  // filePath variables
  let generic = null;
  let translated = null;
  
  // Construct the expected paths
  if (metadata.language != undefined) {
    translated = CWD + `/translated_docs/'${metadata.language}'/${metadata.source}`;
  }

  if (metadata.original_id) {
    generic = CWD + `/versioned_docs/${metadata.source}`;
  }
  else { 
    let docs = readMetadata.getDocsPath()
    generic = CWD + `/../${docs}/${metadata.source}`;
  }

  // Check Paths: Return first that exists: translated then generic
  let validFile = fs.existsSync(translated) ? translated : fs.existsSync(generic) ? generic : null;

  if (validFile === null) {
    next();
    return; // Abort
  }
  
  let latestVersion = env.versioning.latestVersion;

  // LOADING
  let document = readMetadata.extractMetadata(fs.readFileSync(validFile, 'utf8'))
  let rawContent = document.rawContent;

  /**
   * document from this method has metaData? Should we use it istead?
   * If we can detect a difference between rawContent.metadata and the metadata from the json-like cache
   * Should we flush it?
   */

  // generate table of contents if appropriate
  if (rawContent && rawContent.indexOf(TABLE_OF_CONTENTS_TOKEN) !== -1) {
    rawContent = insertTableOfContents(rawContent);
  }

  // mdToHtml is a map from a markdown file name to its html link, used to
  // change relative markdown links that work on GitHub into actual site links
  const mdToHtml = {};
  Object.keys(Metadata).forEach(id => {
    const metadata = Metadata[id];
    // We only process the generic language files
    if (metadata.language != undefined || metadata.original_id) {
      return;
    }
    let htmlLink = siteConfig.baseUrl + metadata.permalink.replace('/next/', '/');
    mdToHtml[metadata.source] = htmlLink.replace('/docs/', '/docs/VERSION/');
  });

  // replace any links to markdown files to their website html links
  Object.keys(mdToHtml).forEach(function(key, index) {
    let link = mdToHtml[key];
    // TODO: CHECK THIS
    link = link.replace('/en/', '/' + metadata.language + '/');
    link = link.replace(
      '/VERSION/',
      metadata.version && metadata.version !== latestVersion
        ? '/' + metadata.version + '/'
        : '/'
    );
    // replace relative links without "./"
    rawContent = rawContent.replace(
      new RegExp('\\]\\(' + key, 'g'),
      '](' + link
    );
    // replace relative links with "./"
    rawContent = rawContent.replace(
      new RegExp('\\]\\(\\./' + key, 'g'),
      '](' + link
    );
  });

  // replace any relative links to static assets to absolute links
  rawContent = rawContent.replace(
    /\]\(assets\//g,
    '](' + siteConfig.baseUrl + 'docs/assets/'
  );

  // ??? Explanation Needed
  removeModuleAndChildrenFromCache('../core/DocsLayout.js');
  const DocsLayout = require('../core/DocsLayout.js');

  let Doc;
  if (metadata.layout && siteConfig.layouts[metadata.layout]) {
    Doc = siteConfig.layouts[metadata.layout]({
      React,
      MarkdownBlock: require('../core/MarkdownBlock.js'),
    });
  }

  // We pass the raw Markdown to our main React component. This contains EVERYTHING, head, html, title etc.
  return (
    <DocsLayout
      metadata={metadata}
      language={metadata.language}
      config={siteConfig}
      Doc={Doc}>
      {rawContent}
    </DocsLayout>
  );
}
