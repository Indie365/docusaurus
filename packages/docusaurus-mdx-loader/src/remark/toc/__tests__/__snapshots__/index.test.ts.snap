// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toc remark plugin does not overwrite TOC var if no TOC 1`] = `
"foo

\`bar\`

\`\`\`js
baz
\`\`\`

export const toc = 1;
"
`;

exports[`toc remark plugin escapes inline code 1`] = `
"export const toc = [{
  "value": "<code>&lt;Head /&gt;</code>",
  "id": "head-",
  "level": 2
}, {
  "value": "<code>&lt;Head&gt;Test&lt;/Head&gt;</code>",
  "id": "headtesthead",
  "level": 3
}, {
  "value": "<code>&lt;div /&gt;</code>",
  "id": "div-",
  "level": 2
}, {
  "value": "<code>&lt;div&gt; Test &lt;/div&gt;</code>",
  "id": "div-test-div",
  "level": 2
}, {
  "value": "<code>&lt;div&gt;&lt;i&gt;Test&lt;/i&gt;&lt;/div&gt;</code>",
  "id": "divitestidiv",
  "level": 2
}, {
  "value": "<code>&lt;div&gt;&lt;i&gt;Test&lt;/i&gt;&lt;/div&gt;</code>",
  "id": "divitestidiv-1",
  "level": 2
}];


## \`<Head />\`

### \`<Head>Test</Head>\`

## \`<div />\`

## \`<div> Test </div>\`

## \`<div><i>Test</i></div>\`

## [\`<div><i>Test</i></div>\`](/some/link)
"
`;

exports[`toc remark plugin exports even with existing name 1`] = `
"export const toc = [{
  "value": "Thanos",
  "id": "thanos",
  "level": 2
}, {
  "value": "Tony Stark",
  "id": "tony-stark",
  "level": 2
}, {
  "value": "Avengers",
  "id": "avengers",
  "level": 3
}];


## Thanos

## Tony Stark

### Avengers
"
`;

exports[`toc remark plugin handles empty headings 1`] = `
"export const toc = [];


# Ignore this

##

## ![](an-image.svg)
"
`;

exports[`toc remark plugin inserts below imports 1`] = `
"import something from 'something';


import somethingElse from 'something-else';


export const toc = [{
  "value": "Title",
  "id": "title",
  "level": 2
}, {
  "value": "Test",
  "id": "test",
  "level": 2
}, {
  "value": "Again",
  "id": "again",
  "level": 3
}];


## Title

## Test

### Again

Content.
"
`;

exports[`toc remark plugin outputs empty array for no TOC 1`] = `
"export const toc = [];


foo

\`bar\`

\`\`\`js
baz
\`\`\`
"
`;

exports[`toc remark plugin works on non text phrasing content 1`] = `
"export const toc = [{
  "value": "<em>Emphasis</em>",
  "id": "emphasis",
  "level": 2
}, {
  "value": "<strong>Importance</strong>",
  "id": "importance",
  "level": 3
}, {
  "value": "<del>Strikethrough</del>",
  "id": "strikethrough",
  "level": 2
}, {
  "value": "<i>HTML</i>",
  "id": "html",
  "level": 2
}, {
  "value": "<code>inline.code()</code>",
  "id": "inlinecode",
  "level": 2
}, {
  "value": "some <span class=\\"some-class\\">styled</span> <strong>heading</strong> <span class=\\"myClassName &lt;&gt; weird char\\"></span> test",
  "id": "some-styled-heading--test",
  "level": 2
}];


## *Emphasis*

### **Importance**

## ~~Strikethrough~~

## <i>HTML</i>

## \`inline.code()\`

## some <span className="some-class" style={{border: "solid"}}>styled</span> <strong>heading</strong> <span class="myClass" className="myClassName <> weird char" data-random-attr="456" /> test
"
`;

exports[`toc remark plugin works on text content 1`] = `
"export const toc = [{
  "value": "Endi",
  "id": "endi",
  "level": 3
}, {
  "value": "Endi",
  "id": "endi-1",
  "level": 2
}, {
  "value": "Yangshun",
  "id": "yangshun",
  "level": 3
}, {
  "value": "I ♥ unicode.",
  "id": "i--unicode",
  "level": 2
}];


### Endi

\`\`\`md
## This is ignored
\`\`\`

## Endi

Lorem ipsum

### Yangshun

Some content here

## I ♥ unicode.

export const c = 1;
"
`;

exports[`toc remark plugin works with imported markdown 1`] = `
"import Partial1, {toc as __tocPartial1} from './_partial1.md';


import SomeComponent from './SomeComponent';


# Index

Some text

import Partial2, {toc as __tocPartial2} from './_partial2.md';


## Index section 1

Foo

<Partial1 />

Some text

<SomeComponent />

## Index section 2

<Partial2 />

## Unused partials

Unused partials (that are only imported but not rendered) shouldn't alter the TOC

import UnusedPartialImport from './_partial3.md';


## NonExisting Partials

Partials that do not exist should alter the TOC

It's not the responsibility of the Remark plugin to check for their existence

import DoesNotExist, {toc as __tocDoesNotExist} from './_doesNotExist.md';


export const toc = [{
  "value": "Index section 1",
  "id": "index-section-1",
  "level": 2
}, ...__tocPartial1, {
  "value": "Index section 2",
  "id": "index-section-2",
  "level": 2
}, ...__tocPartial2, {
  "value": "Unused partials",
  "id": "unused-partials",
  "level": 2
}, {
  "value": "NonExisting Partials",
  "id": "nonexisting-partials",
  "level": 2
}, ...__tocDoesNotExist, {
  "value": "Duplicate partials",
  "id": "duplicate-partials",
  "level": 2
}, ...__tocPartial1, ...__tocPartial1];


<DoesNotExist />

## Duplicate partials

It's fine if we use partials at the end

<Partial1 />

And we can use the partial multiple times!

<Partial1 />
"
`;

exports[`toc remark plugin works with partial imported after its usage 1`] = `
"# Partial used before import

While it looks weird to import after usage, this remains valid MDX usage.

<Partial />

import Partial, {toc as __tocPartial} from './_partial.md';


export const toc = [...__tocPartial];
"
`;

exports[`toc remark plugin works with partials importing other partials 1`] = `
"## Partial 2

Partial 2

### Partial 2 Sub Heading

Content

import Partial2Nested, {toc as __tocPartial2Nested} from './partial2-nested.md';


export const toc = [{
  "value": "Partial 2",
  "id": "partial-2",
  "level": 2
}, {
  "value": "Partial 2 Sub Heading",
  "id": "partial-2-sub-heading",
  "level": 3
}, ...__tocPartial2Nested];


<Partial2Nested />
"
`;
